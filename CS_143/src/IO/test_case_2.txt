# Network spec for test case 1

# Link(float buffer_size, 
#      float prop_delay, 
#      float capacity, 
#      string n1, 
#      string n2, 
#      string link_id)
link 1048576 0.01 10000000 router1 router2 link1
link 1048576 0.01 10000000 router2 router3 link2
link 1048576 0.01 10000000 router3 router4 link3
link 1048576 0.01 12500000 router1 s2      link4
link 1048576 0.01 12500000 router1 s1      link5
link 1048576 0.01 12500000 router2 t2      link6
link 1048576 0.01 12500000 router3 s3      link7
link 1048576 0.01 12500000 router4 t1      link8
link 1048576 0.01 12500000 router4 t3      link9

# Host(shared_ptr<Link> host_link, 
#      string host_id)
host link5 s1
host link4 s2
host link7 s3
host link8 t1
host link6 t2
host link9 t3

# Router(vector<string> host_list, 
#        vector<shared_ptr<Link> > neighboring_links, 
#        string router_id)
router [s1 s2 s3 t1 t2 t3] [link1 link4 link5] router1
router [s1 s2 s3 t1 t2 t3] [link1 link2 link6] router2
router [s1 s2 s3 t1 t2 t3] [link2 link3 link7] router3
router [s1 s2 s3 t1 t2 t3] [link3 link8 link9] router4

# Flow(string ID, 
#      string dest, 
#      shared_ptr<CongestionAlg> alg, 
#      int data_size, 
#      shared_ptr<Host> host, 
#      int windowSize, 
#      float timestamp)
# How to have congestion algorithm?
# Could have a token...ehh.
# don't use underscores!
vegas flow1 t1 400000000 s1 1 0.5
vegas flow2 t2 160000000 s2 1 10
vegas flow3 t3 320000000 s3 1 20


